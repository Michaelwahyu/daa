Open In Colab
pip install networkx
Requirement already satisfied: networkx in /usr/local/lib/python3.7/dist-packages (2.6.3)
#Pengukuran Centrality: Eigenvector
import networkx as nx
import matplotlib.pyplot as plt
vertices = range(1, 10)
edges = [(7,2), (2,3), (7, 4), (4, 5), (7, 3), (7, 5), (1, 6), (1, 7), (2, 8), (2, 9)]
G = nx.Graph()
G.add_nodes_from(vertices)
G.add_edges_from(edges)
nx.draw(G, with_labels=True, node_color='y', node_size=800)

# Pengukuran Degree Centrality
# Untuk semakin banyak edges yang terhubung maka nilai semakin tinggi
nx.degree_centrality(G)
{1: 0.25,
 2: 0.5,
 3: 0.25,
 4: 0.25,
 5: 0.25,
 6: 0.125,
 7: 0.625,
 8: 0.125,
 9: 0.125}
# Pengukuran Betweenness Centrality
# Untuk edge yang paling banyak dilewati semakin tinggi nilainya
nx.betweenness_centrality(G)
{1: 0.25,
 2: 0.46428571428571425,
 3: 0.0,
 4: 0.0,
 5: 0.0,
 6: 0.0,
 7: 0.7142857142857142,
 8: 0.0,
 9: 0.0}
# Pengukuran Closeness Centrality
nx.closeness_centrality(G)
{1: 0.5,
 2: 0.6153846153846154,
 3: 0.5333333333333333,
 4: 0.47058823529411764,
 5: 0.47058823529411764,
 6: 0.34782608695652173,
 7: 0.7272727272727273,
 8: 0.4,
 9: 0.4}
centrality = nx.eigenvector_centrality(G)
sorted((v, '{:0.2f}'. format(c)) for v, c in centrality.items())
[(1, '0.24'),
 (2, '0.45'),
 (3, '0.36'),
 (4, '0.32'),
 (5, '0.32'),
 (6, '0.08'),
 (7, '0.59'),
 (8, '0.16'),
 (9, '0.16')]
#Pengukuran Centrality: Eigenvector
import networkx as nx
import matplotlib.pyplot as plt
vertices = range(1, 10)
edges = [(3,2), (1,2), (4, 3), (5, 3), (4, 5), (6, 4), (7, 4), (7, 5), (8, 5), (6, 7), (7, 8), (9, 6), (9, 4), (9, 7), (9, 10), (10, 7), (10, 5), (10, 8)]
G = nx.Graph()
G.add_edges_from(edges)
nx.draw(G, with_labels=True, node_color='orange', node_size=800)

# Pengukuran Degree Centrality
# Untuk semakin banyak edges yang terhubung maka nilai semakin tinggi
nx.degree_centrality(G)
{1: 0.1111111111111111,
 2: 0.2222222222222222,
 3: 0.3333333333333333,
 4: 0.5555555555555556,
 5: 0.5555555555555556,
 6: 0.3333333333333333,
 7: 0.6666666666666666,
 8: 0.3333333333333333,
 9: 0.4444444444444444,
 10: 0.4444444444444444}
# Pengukuran Betweenness Centrality
# Untuk edge yang paling banyak dilewati semakin tinggi nilainya
nx.betweenness_centrality(G)
{1: 0.0,
 2: 0.2222222222222222,
 3: 0.38888888888888884,
 4: 0.23148148148148148,
 5: 0.23148148148148148,
 6: 0.0,
 7: 0.10185185185185183,
 8: 0.0,
 9: 0.023148148148148143,
 10: 0.023148148148148143}
# Pengukuran Closeness Centrality
nx.closeness_centrality(G)
{1: 0.3103448275862069,
 2: 0.42857142857142855,
 3: 0.6,
 4: 0.6428571428571429,
 5: 0.6428571428571429,
 6: 0.5,
 7: 0.6,
 8: 0.5,
 9: 0.5294117647058824,
 10: 0.5294117647058824}
centrality = nx.eigenvector_centrality(G)
sorted((v, '{:0.2f}'. format(c)) for v, c in centrality.items())
[(1, '0.01'),
 (2, '0.05'),
 (3, '0.20'),
 (4, '0.40'),
 (5, '0.40'),
 (6, '0.29'),
 (7, '0.48'),
 (8, '0.29'),
 (9, '0.35'),
 (10, '0.35')]
#Pengukuran Centrality: Eigenvector
import networkx as nx
import matplotlib.pyplot as plt
vertices = range(1, 10)
edges = [(6,9), (6,7), (6,14), (6,8), (2,6), (2,11), (2,12), (2,15), (2,1), (1,4), (1, 10), (2, 3), (3, 5), (3, 13)]
G = nx.Graph()
G.add_edges_from(edges)
nx.draw(G, with_labels=True, node_color='orange', node_size=800)

# Pengukuran Degree Centrality
# Untuk semakin banyak edges yang terhubung maka nilai semakin tinggi
nx.degree_centrality(G)
{1: 0.21428571428571427,
 2: 0.42857142857142855,
 3: 0.21428571428571427,
 4: 0.07142857142857142,
 5: 0.07142857142857142,
 6: 0.3571428571428571,
 7: 0.07142857142857142,
 8: 0.07142857142857142,
 9: 0.07142857142857142,
 10: 0.07142857142857142,
 11: 0.07142857142857142,
 12: 0.07142857142857142,
 13: 0.07142857142857142,
 14: 0.07142857142857142,
 15: 0.07142857142857142}
# Pengukuran Betweenness Centrality
# Untuk edge yang paling banyak dilewati semakin tinggi nilainya
nx.betweenness_centrality(G)
{1: 0.27472527472527475,
 2: 0.8241758241758242,
 3: 0.27472527472527475,
 4: 0.0,
 5: 0.0,
 6: 0.5054945054945056,
 7: 0.0,
 8: 0.0,
 9: 0.0,
 10: 0.0,
 11: 0.0,
 12: 0.0,
 13: 0.0,
 14: 0.0,
 15: 0.0}
# Pengukuran Closeness Centrality
nx.closeness_centrality(G)
{1: 0.45161290322580644,
 2: 0.6363636363636364,
 3: 0.45161290322580644,
 4: 0.3181818181818182,
 5: 0.3181818181818182,
 6: 0.5185185185185185,
 7: 0.35,
 8: 0.35,
 9: 0.35,
 10: 0.3181818181818182,
 11: 0.4,
 12: 0.4,
 13: 0.3181818181818182,
 14: 0.35,
 15: 0.4}
centrality = nx.eigenvector_centrality(G)
sorted((v, '{:0.2f}'. format(c)) for v, c in centrality.items())
[(1, '0.29'),
 (2, '0.60'),
 (3, '0.29'),
 (4, '0.10'),
 (5, '0.10'),
 (6, '0.44'),
 (7, '0.16'),
 (8, '0.16'),
 (9, '0.16'),
 (10, '0.10'),
 (11, '0.21'),
 (12, '0.21'),
 (13, '0.10'),
 (14, '0.16'),
 (15, '0.21')]
G_fb = nx.read_edgelist("facebook_combined.txt", create_using = nx.Graph(), nodetype = int)
print(nx.info(G_fb))
Graph with 4039 nodes and 88234 edges
pos = nx.spring_layout(G_fb)
betCent = nx.betweenness_centrality(G_fb, normalized=True, endpoints=True)
node_color = [20000.0 * G_fb.degree(v) for v in G_fb]
node_size = [v * 10000 for v in betCent.values()]
plt.figure(figsize=(20,20))
nx.draw_networkx(G_fb, pos=pos, with_labels=False,
                 node_color = node_color,
                 node_size=node_size)
plt.axis('off')
(-1.2075262263417244,
 1.18396647721529,
 -0.6803924015164375,
 0.6488319209218025)
